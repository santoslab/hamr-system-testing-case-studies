package isolette.system_tests.rst

import org.sireum._
import isolette._

// Do not edit this file as it will be overwritten if SystemTestArtifactGen is rerun

object TestIt_Example_Regulate_Subsystem_Outputs_Container_DSC_Test_Harness extends App {

  override def main(args: ISZ[String]): Z = {
    System.setProperty("TEST_FAMILY_NAME", "<key from testMatrix>")

    val instance = new Example_Regulate_Subsystem_Outputs_Container_DSC_Test_Harness()

    // simulate DSC calling next
    val container = instance.next()

    // simulate DSC calling test
    val result = instance.test(container)

    return if(result) 0 else 1
  }
}

class Example_Regulate_Subsystem_Outputs_Container_DSC_Test_Harness
  extends Example_Regulate_Subsystem_Outputs_Container_Test_wSlangCheck
  with Regulate_Subsystem_Outputs_Container_DSC_Test_Harness {

  override def next(): isolette.system_tests.rst.Regulate_Subsystem_Outputs_Container = {
    val testRow = testMatrix.get(getTestId()).get
    return Regulate_Subsystem_Outputs_Container_Profile.next(testRow.profile)
  }

  override def test(o: isolette.system_tests.rst.Regulate_Subsystem_Outputs_Container): B = {
    val testId = getTestId()
    val testRow = testMatrix.get(testId).get

    println(genTestName(testId, testRow))

    disableLogsAndGuis()

    super.beforeEach()

    if (!testRow.preStateCheck(o)) {
      println(s"Didn't pass pre state check ${o}")

      DSC_RecordUnsatPre.report(toCompactJson(o))

      return T
    } else {

      val result = testRow.testMethod.function(o, testRow.property.function)

      this.afterEach()

      return result
    }
  }

  def getTestId(): String = {
    Os.prop("TEST_FAMILY_NAME") match {
      case Some(v) => return v
      case _ =>
        Os.env("TEST_FAMILY_NAME") match {
          case Some(v) => return v
          case _ =>
        }
    }
    halt("TEST_FAMILY_NAME not defined")
  }

  override def string: String = toString

  override def $clonable: Boolean = F

  override def $clonable_=(b: Boolean): org.sireum.$internal.MutableMarker = this

  override def $owned: Boolean = F

  override def $owned_=(b: Boolean): org.sireum.$internal.MutableMarker = this

  override def $clone: org.sireum.$internal.MutableMarker = this
}
