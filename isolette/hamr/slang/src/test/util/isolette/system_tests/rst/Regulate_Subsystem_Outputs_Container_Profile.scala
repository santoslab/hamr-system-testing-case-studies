package isolette.system_tests.rst

import org.sireum._
import isolette._

// Do not edit this file as it will be overwritten if SystemTestArtifactGen is rerun

object Regulate_Subsystem_Outputs_Container_Profile {

  // a call to next may result in an AssertionError which is an indication that
  // SlangCheck was unable to satisfy a field's filter.  Consider using
  // nextH instead
  def next(profile: Regulate_Subsystem_Outputs_Container_Profile): Regulate_Subsystem_Outputs_Container = {
    return Regulate_Subsystem_Outputs_Container (
      heat_control = profile.heat_control.nextIsolette_Data_ModelOn_OffType(),
      display_temperature = profile.display_temperature.nextIsolette_Data_ModelTemp_impl(),
      regulator_status = profile.regulator_status.nextIsolette_Data_ModelStatusType(),
      mode = profile.mode.nextIsolette_Data_ModelRegulator_ModeType()
    )
  }

  // nextH will return None() if SlangCheck is unable to satisfy a field's filter
  def nextH(profile: Regulate_Subsystem_Outputs_Container_Profile): Option[Regulate_Subsystem_Outputs_Container] = {
    try {
      return Some(Regulate_Subsystem_Outputs_Container (
        heat_control = profile.heat_control.nextIsolette_Data_ModelOn_OffType(),
        display_temperature = profile.display_temperature.nextIsolette_Data_ModelTemp_impl(),
        regulator_status = profile.regulator_status.nextIsolette_Data_ModelStatusType(),
        mode = profile.mode.nextIsolette_Data_ModelRegulator_ModeType()))
    } catch {
      case e: AssertionError =>
        // SlangCheck was unable to satisfy a datatype's filter
        return None()
    }
  }

  def getDefaultProfile: Regulate_Subsystem_Outputs_Container_Profile = {
    return Regulate_Subsystem_Outputs_Container_Profile (
      name = "Default Regulate_Subsystem_Outputs_Container_Profile Profile",
      numTests = 100,
      numTestVectorGenRetries = 100,

      heat_control = Regulate_Subsystem_Outputs_Container_Util.freshRandomLib,
      display_temperature = Regulate_Subsystem_Outputs_Container_Util.freshRandomLib,
      regulator_status = Regulate_Subsystem_Outputs_Container_Util.freshRandomLib,
      mode = Regulate_Subsystem_Outputs_Container_Util.freshRandomLib
    )
  }
}

case class Regulate_Subsystem_Outputs_Container_Profile (
  var name: String,
  var numTests: Z,
  var numTestVectorGenRetries: Z,

  var heat_control : RandomLib,
  var display_temperature : RandomLib,
  var regulator_status : RandomLib,
  var mode : RandomLib) extends org.sireum.$internal.MutableMarker {

  override def $clonable: Boolean = F

  override def $clonable_=(b: Boolean): org.sireum.$internal.MutableMarker = this

  override def $owned: Boolean = F

  override def $owned_=(b: Boolean): org.sireum.$internal.MutableMarker = this

  override def $clone: org.sireum.$internal.MutableMarker = this
}
