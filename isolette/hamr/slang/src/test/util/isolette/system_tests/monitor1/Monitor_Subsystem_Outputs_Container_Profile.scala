package isolette.system_tests.monitor1

import org.sireum._
import isolette._

// Do not edit this file as it will be overwritten if SystemTestArtifactGen is rerun

object Monitor_Subsystem_Outputs_Container_Profile {

  // a call to next may result in an AssertionError which is an indication that
  // SlangCheck was unable to satisfy a field's filter.  Consider using
  // nextH instead
  def next(profile: Monitor_Subsystem_Outputs_Container_Profile): Monitor_Subsystem_Outputs_Container = {
    return Monitor_Subsystem_Outputs_Container (
      monitor_status = profile.monitor_status.nextIsolette_Data_ModelStatusType(),
      alarm_control = profile.alarm_control.nextIsolette_Data_ModelOn_OffType(),
      monitor_mode = profile.monitor_mode.nextIsolette_Data_ModelMonitor_ModeType()
    )
  }

  // nextH will return None() if SlangCheck is unable to satisfy a field's filter
  def nextH(profile: Monitor_Subsystem_Outputs_Container_Profile): Option[Monitor_Subsystem_Outputs_Container] = {
    try {
      return Some(Monitor_Subsystem_Outputs_Container (
        monitor_status = profile.monitor_status.nextIsolette_Data_ModelStatusType(),
        alarm_control = profile.alarm_control.nextIsolette_Data_ModelOn_OffType(),
        monitor_mode = profile.monitor_mode.nextIsolette_Data_ModelMonitor_ModeType()))
    } catch {
      case e: AssertionError =>
        // SlangCheck was unable to satisfy a datatype's filter
        return None()
    }
  }

  def getDefaultProfile: Monitor_Subsystem_Outputs_Container_Profile = {
    return Monitor_Subsystem_Outputs_Container_Profile (
      name = "Default Monitor_Subsystem_Outputs_Container_Profile Profile",
      numTests = 100,
      numTestVectorGenRetries = 100,

      monitor_status = Monitor_Subsystem_Outputs_Container_Util.freshRandomLib,
      alarm_control = Monitor_Subsystem_Outputs_Container_Util.freshRandomLib,
      monitor_mode = Monitor_Subsystem_Outputs_Container_Util.freshRandomLib
    )
  }
}

case class Monitor_Subsystem_Outputs_Container_Profile (
  var name: String,
  var numTests: Z,
  var numTestVectorGenRetries: Z,

  var monitor_status : RandomLib,
  var alarm_control : RandomLib,
  var monitor_mode : RandomLib) extends org.sireum.$internal.MutableMarker {

  override def $clonable: Boolean = F

  override def $clonable_=(b: Boolean): org.sireum.$internal.MutableMarker = this

  override def $owned: Boolean = F

  override def $owned_=(b: Boolean): org.sireum.$internal.MutableMarker = this

  override def $clone: org.sireum.$internal.MutableMarker = this
}
